import ollama

# Models
EMBEDDING_MODEL = 'hf.co/CompendiumLabs/bge-base-en-v1.5-gguf'
LANGUAGE_MODEL = 'hf.co/bartowski/Llama-3.2-1B-Instruct-GGUF'

# Vector Database
VECTOR_DB = []

# Load Dataset
dataset = []
with open('Ashoka the Great.txt', 'r') as file:
    dataset = file.readlines()
    print(f'Loaded {len(dataset)} entries')

# Function to add chunks with embeddings
def add_chunk_to_database(chunk):
    embedding = ollama.embed(model=EMBEDDING_MODEL, input=chunk)['embeddings'][0]
    VECTOR_DB.append((chunk.strip(), embedding))

# Populate vector database
for i, chunk in enumerate(dataset):
    add_chunk_to_database(chunk)
    print(f'Added chunk {i+1}/{len(dataset)} to the database')

# Cosine similarity
def cosine_similarity(a, b):
    dot_product = sum(x * y for x, y in zip(a, b))
    norm_a = sum(x ** 2 for x in a) ** 0.5
    norm_b = sum(x ** 2 for x in b) ** 0.5
    return dot_product / (norm_a * norm_b)

# Retrieve relevant chunks
def retrieve(query, top_n=3):
    query_embedding = ollama.embed(model=EMBEDDING_MODEL, input=query)['embeddings'][0]
    similarities = []
    for chunk, embedding in VECTOR_DB:
        similarity = cosine_similarity(query_embedding, embedding)
        similarities.append((chunk, similarity))
    similarities.sort(key=lambda x: x[1], reverse=True)
    return similarities[:top_n]

# Main chatbot loop
while True:
    input_query = input("\nAsk me a question (or type 'exit' to quit): ")
    if input_query.lower() in ["exit", "quit"]:
        print("Goodbye! ðŸ‘‹")
        break

    retrieved_knowledge = retrieve(input_query)

    print("\nRetrieved knowledge:")
    for chunk, similarity in retrieved_knowledge:
        print(f' - (similarity: {similarity:.2f}) {chunk}')

    # Build prompt with retrieved knowledge
    instruction_prompt = f"""You are a helpful chatbot. 
Use only the following context to answer the userâ€™s question. 
If the answer is not in the context, say you don't know.

Context:
{chr(5).join([f' - {chunk}' for chunk, _ in retrieved_knowledge])}

User Question: {input_query}
Answer:"""

    # Get response from LLM
    response = ollama.chat(
        model=LANGUAGE_MODEL,
        messages=[
            {"role": "system", "content": "You are a helpful AI assistant."},
            {"role": "user", "content": instruction_prompt}
        ]
    )

    print("\nðŸ¤– Chatbot:", response['message']['content'])
